/* Auto-generated by genmsg_cpp for file /home/guillermo/anaconda3/envs/CenterNet/CenterNet/src/ROS/src/centernet_ros/msg/ObjectInfo.msg */
#ifndef CENTERNET_ROS_MESSAGE_OBJECTINFO_H
#define CENTERNET_ROS_MESSAGE_OBJECTINFO_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace centernet_ros
{
template <class ContainerAllocator>
struct ObjectInfo_ {
  typedef ObjectInfo_<ContainerAllocator> Type;

  ObjectInfo_()
  : type()
  , prob(0.0)
  , tl_x(0)
  , tl_y(0)
  , width(0)
  , height(0)
  {
  }

  ObjectInfo_(const ContainerAllocator& _alloc)
  : type(_alloc)
  , prob(0.0)
  , tl_x(0)
  , tl_y(0)
  , width(0)
  , height(0)
  {
  }

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _type_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  type;

  typedef float _prob_type;
  float prob;

  typedef int32_t _tl_x_type;
  int32_t tl_x;

  typedef int32_t _tl_y_type;
  int32_t tl_y;

  typedef int32_t _width_type;
  int32_t width;

  typedef int32_t _height_type;
  int32_t height;


  typedef boost::shared_ptr< ::centernet_ros::ObjectInfo_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::centernet_ros::ObjectInfo_<ContainerAllocator>  const> ConstPtr;
}; // struct ObjectInfo
typedef  ::centernet_ros::ObjectInfo_<std::allocator<void> > ObjectInfo;

typedef boost::shared_ptr< ::centernet_ros::ObjectInfo> ObjectInfoPtr;
typedef boost::shared_ptr< ::centernet_ros::ObjectInfo const> ObjectInfoConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::centernet_ros::ObjectInfo_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::centernet_ros::ObjectInfo_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace centernet_ros

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::centernet_ros::ObjectInfo_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::centernet_ros::ObjectInfo_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::centernet_ros::ObjectInfo_<ContainerAllocator> > {
  static const char* value() 
  {
    return "55a63526fe7c32ce41ef4e85ff85bb42";
  }

  static const char* value(const  ::centernet_ros::ObjectInfo_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x55a63526fe7c32ceULL;
  static const uint64_t static_value2 = 0x41ef4e85ff85bb42ULL;
};

template<class ContainerAllocator>
struct DataType< ::centernet_ros::ObjectInfo_<ContainerAllocator> > {
  static const char* value() 
  {
    return "centernet_ros/ObjectInfo";
  }

  static const char* value(const  ::centernet_ros::ObjectInfo_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::centernet_ros::ObjectInfo_<ContainerAllocator> > {
  static const char* value() 
  {
    return "string type\n\
float32 prob\n\
int32 tl_x\n\
int32 tl_y\n\
int32 width\n\
int32 height\n\
\n\
";
  }

  static const char* value(const  ::centernet_ros::ObjectInfo_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::centernet_ros::ObjectInfo_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.type);
    stream.next(m.prob);
    stream.next(m.tl_x);
    stream.next(m.tl_y);
    stream.next(m.width);
    stream.next(m.height);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER
}; // struct ObjectInfo_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::centernet_ros::ObjectInfo_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::centernet_ros::ObjectInfo_<ContainerAllocator> & v) 
  {
    s << indent << "type: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.type);
    s << indent << "prob: ";
    Printer<float>::stream(s, indent + "  ", v.prob);
    s << indent << "tl_x: ";
    Printer<int32_t>::stream(s, indent + "  ", v.tl_x);
    s << indent << "tl_y: ";
    Printer<int32_t>::stream(s, indent + "  ", v.tl_y);
    s << indent << "width: ";
    Printer<int32_t>::stream(s, indent + "  ", v.width);
    s << indent << "height: ";
    Printer<int32_t>::stream(s, indent + "  ", v.height);
  }
};


} // namespace message_operations
} // namespace ros

#endif // CENTERNET_ROS_MESSAGE_OBJECTINFO_H

