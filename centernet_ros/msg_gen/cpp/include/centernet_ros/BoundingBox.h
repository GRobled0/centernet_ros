/* Auto-generated by genmsg_cpp for file /home/guillermo/anaconda3/envs/CenterNet/CenterNet/src/ROS/src/centernet_ros/msg/BoundingBox.msg */
#ifndef CENTERNET_ROS_MESSAGE_BOUNDINGBOX_H
#define CENTERNET_ROS_MESSAGE_BOUNDINGBOX_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace centernet_ros
{
template <class ContainerAllocator>
struct BoundingBox_ {
  typedef BoundingBox_<ContainerAllocator> Type;

  BoundingBox_()
  : Class()
  , probability(0.0)
  , xmin(0)
  , ymin(0)
  , xmax(0)
  , ymax(0)
  , depth(0.0)
  {
  }

  BoundingBox_(const ContainerAllocator& _alloc)
  : Class(_alloc)
  , probability(0.0)
  , xmin(0)
  , ymin(0)
  , xmax(0)
  , ymax(0)
  , depth(0.0)
  {
  }

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _Class_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  Class;

  typedef double _probability_type;
  double probability;

  typedef int64_t _xmin_type;
  int64_t xmin;

  typedef int64_t _ymin_type;
  int64_t ymin;

  typedef int64_t _xmax_type;
  int64_t xmax;

  typedef int64_t _ymax_type;
  int64_t ymax;

  typedef double _depth_type;
  double depth;


  typedef boost::shared_ptr< ::centernet_ros::BoundingBox_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::centernet_ros::BoundingBox_<ContainerAllocator>  const> ConstPtr;
}; // struct BoundingBox
typedef  ::centernet_ros::BoundingBox_<std::allocator<void> > BoundingBox;

typedef boost::shared_ptr< ::centernet_ros::BoundingBox> BoundingBoxPtr;
typedef boost::shared_ptr< ::centernet_ros::BoundingBox const> BoundingBoxConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::centernet_ros::BoundingBox_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::centernet_ros::BoundingBox_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace centernet_ros

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::centernet_ros::BoundingBox_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::centernet_ros::BoundingBox_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::centernet_ros::BoundingBox_<ContainerAllocator> > {
  static const char* value() 
  {
    return "736162dbf88cd926f35ced1ad47b7fa7";
  }

  static const char* value(const  ::centernet_ros::BoundingBox_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x736162dbf88cd926ULL;
  static const uint64_t static_value2 = 0xf35ced1ad47b7fa7ULL;
};

template<class ContainerAllocator>
struct DataType< ::centernet_ros::BoundingBox_<ContainerAllocator> > {
  static const char* value() 
  {
    return "centernet_ros/BoundingBox";
  }

  static const char* value(const  ::centernet_ros::BoundingBox_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::centernet_ros::BoundingBox_<ContainerAllocator> > {
  static const char* value() 
  {
    return "string Class\n\
float64 probability\n\
int64 xmin\n\
int64 ymin\n\
int64 xmax\n\
int64 ymax\n\
float64 depth\n\
\n\
\n\
";
  }

  static const char* value(const  ::centernet_ros::BoundingBox_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::centernet_ros::BoundingBox_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.Class);
    stream.next(m.probability);
    stream.next(m.xmin);
    stream.next(m.ymin);
    stream.next(m.xmax);
    stream.next(m.ymax);
    stream.next(m.depth);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER
}; // struct BoundingBox_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::centernet_ros::BoundingBox_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::centernet_ros::BoundingBox_<ContainerAllocator> & v) 
  {
    s << indent << "Class: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.Class);
    s << indent << "probability: ";
    Printer<double>::stream(s, indent + "  ", v.probability);
    s << indent << "xmin: ";
    Printer<int64_t>::stream(s, indent + "  ", v.xmin);
    s << indent << "ymin: ";
    Printer<int64_t>::stream(s, indent + "  ", v.ymin);
    s << indent << "xmax: ";
    Printer<int64_t>::stream(s, indent + "  ", v.xmax);
    s << indent << "ymax: ";
    Printer<int64_t>::stream(s, indent + "  ", v.ymax);
    s << indent << "depth: ";
    Printer<double>::stream(s, indent + "  ", v.depth);
  }
};


} // namespace message_operations
} // namespace ros

#endif // CENTERNET_ROS_MESSAGE_BOUNDINGBOX_H

