/* Auto-generated by genmsg_cpp for file /home/guillermo/anaconda3/envs/CenterNet/CenterNet/src/ROS/src/centernet_ros/msg/BoundingBoxes.msg */
#ifndef CENTERNET_ROS_MESSAGE_BOUNDINGBOXES_H
#define CENTERNET_ROS_MESSAGE_BOUNDINGBOXES_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "std_msgs/Header.h"
#include "std_msgs/Header.h"
#include "centernet_ros/BoundingBox.h"

namespace centernet_ros
{
template <class ContainerAllocator>
struct BoundingBoxes_ {
  typedef BoundingBoxes_<ContainerAllocator> Type;

  BoundingBoxes_()
  : header()
  , image_header()
  , bounding_boxes()
  {
  }

  BoundingBoxes_(const ContainerAllocator& _alloc)
  : header(_alloc)
  , image_header(_alloc)
  , bounding_boxes(_alloc)
  {
  }

  typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
   ::std_msgs::Header_<ContainerAllocator>  header;

  typedef  ::std_msgs::Header_<ContainerAllocator>  _image_header_type;
   ::std_msgs::Header_<ContainerAllocator>  image_header;

  typedef std::vector< ::centernet_ros::BoundingBox_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::centernet_ros::BoundingBox_<ContainerAllocator> >::other >  _bounding_boxes_type;
  std::vector< ::centernet_ros::BoundingBox_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::centernet_ros::BoundingBox_<ContainerAllocator> >::other >  bounding_boxes;


  typedef boost::shared_ptr< ::centernet_ros::BoundingBoxes_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::centernet_ros::BoundingBoxes_<ContainerAllocator>  const> ConstPtr;
}; // struct BoundingBoxes
typedef  ::centernet_ros::BoundingBoxes_<std::allocator<void> > BoundingBoxes;

typedef boost::shared_ptr< ::centernet_ros::BoundingBoxes> BoundingBoxesPtr;
typedef boost::shared_ptr< ::centernet_ros::BoundingBoxes const> BoundingBoxesConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::centernet_ros::BoundingBoxes_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::centernet_ros::BoundingBoxes_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace centernet_ros

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::centernet_ros::BoundingBoxes_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::centernet_ros::BoundingBoxes_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::centernet_ros::BoundingBoxes_<ContainerAllocator> > {
  static const char* value() 
  {
    return "37a46cf41c29ddce83a4a450ac620f6e";
  }

  static const char* value(const  ::centernet_ros::BoundingBoxes_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x37a46cf41c29ddceULL;
  static const uint64_t static_value2 = 0x83a4a450ac620f6eULL;
};

template<class ContainerAllocator>
struct DataType< ::centernet_ros::BoundingBoxes_<ContainerAllocator> > {
  static const char* value() 
  {
    return "centernet_ros/BoundingBoxes";
  }

  static const char* value(const  ::centernet_ros::BoundingBoxes_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::centernet_ros::BoundingBoxes_<ContainerAllocator> > {
  static const char* value() 
  {
    return "Header header\n\
Header image_header\n\
BoundingBox[] bounding_boxes\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: centernet_ros/BoundingBox\n\
string Class\n\
float64 probability\n\
int64 xmin\n\
int64 ymin\n\
int64 xmax\n\
int64 ymax\n\
float64 depth\n\
\n\
\n\
";
  }

  static const char* value(const  ::centernet_ros::BoundingBoxes_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct HasHeader< ::centernet_ros::BoundingBoxes_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct HasHeader< const ::centernet_ros::BoundingBoxes_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::centernet_ros::BoundingBoxes_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.header);
    stream.next(m.image_header);
    stream.next(m.bounding_boxes);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER
}; // struct BoundingBoxes_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::centernet_ros::BoundingBoxes_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::centernet_ros::BoundingBoxes_<ContainerAllocator> & v) 
  {
    s << indent << "header: ";
s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "image_header: ";
s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.image_header);
    s << indent << "bounding_boxes[]" << std::endl;
    for (size_t i = 0; i < v.bounding_boxes.size(); ++i)
    {
      s << indent << "  bounding_boxes[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::centernet_ros::BoundingBox_<ContainerAllocator> >::stream(s, indent + "    ", v.bounding_boxes[i]);
    }
  }
};


} // namespace message_operations
} // namespace ros

#endif // CENTERNET_ROS_MESSAGE_BOUNDINGBOXES_H

